// js/staking.js
import { web3, lpToken, getCurrentAccount, getStakingContract } from './wallet.js';

export async function loadStakeData() {
  const contract = getStakingContract();
  const user = getCurrentAccount();

  const stakeData = await contract.methods.stakes(user).call();
  const staked = stakeData.amount;

  const reward = await contract.methods.getClaimable(user).call();
  const referrer = await contract.methods.referrerOf(user).call();
  const refReward = await contract.methods.referralReward(user).call();

  document.getElementById("stakedLP").innerText = `ü™ô LP ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì Stake: ${web3.utils.fromWei(staked)}`;
  document.getElementById("claimableReward").innerText = `üíé ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏•‡∏°‡πÑ‡∏î‡πâ: ${web3.utils.fromWei(reward)} KJC`;
  document.getElementById("referrerInfo").innerText = `üë§ ‡∏ú‡∏π‡πâ‡∏ô‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: ${referrer}`;
  document.getElementById("refReward").innerText = `üí∞ ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• Referral: ${web3.utils.fromWei(refReward)} KJC`;
}

export async function stakeLP() {
  try {
    const contract = getStakingContract();
    const user = getCurrentAccount();
    const amount = document.getElementById("lpAmount").value;

    if (!amount || isNaN(amount) || Number(amount) <= 0) {
      alert("‚ùó ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô LP ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
      return;
    }

    const decimals = await lpToken.methods.decimals().call();
    const factor = web3.utils.toBN(10).pow(web3.utils.toBN(decimals));
    const weiAmount = web3.utils.toBN(amount).mul(factor);

    // ‚úÖ Approve ‡∏Å‡πà‡∏≠‡∏ô stake
    await lpToken.methods.approve(contract.options.address, weiAmount).send({ from: user });
    await contract.methods.stakeLP(weiAmount).send({ from: user });

    alert("‚úÖ Stake LP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    loadStakeData();
  } catch (err) {
    console.error("‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", err);
    alert("‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + err.message);
  }
}

export async function claimStakingReward() {
  try {
    const contract = getStakingContract();
    const user = getCurrentAccount();
    await contract.methods.claimStakingReward().send({ from: user });
    alert("üéâ ‡πÄ‡∏Ñ‡∏•‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    loadStakeData();
  } catch (err) {
    alert("‚ùå ‡πÄ‡∏Ñ‡∏•‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + err.message);
  }
}

export async function withdrawLP() {
  try {
    const contract = getStakingContract();
    const user = getCurrentAccount();
    await contract.methods.withdrawLP().send({ from: user });
    alert("üîì ‡∏ñ‡∏≠‡∏ô LP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    loadStakeData();
  } catch (err) {
    alert("‚ùå ‡∏ñ‡∏≠‡∏ô LP ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + err.message);
  }
}
