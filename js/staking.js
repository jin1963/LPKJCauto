// js/staking.js

import {
  stakingContract,
  lpToken,
  getCurrentAccount,
  lpTokenDecimals,
  kjcTokenDecimals
} from './wallet.js';

import {
  getFriendlyErrorMessage,
  displayWeiToToken,
  toWeiFromInput
} from './utils.js';

// üîÅ Stake LP Token
export async function stakeLP() {
  const account = getCurrentAccount();
  if (!account) {
    alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤");
    return;
  }

  const input = document.getElementById("lpAmount").value.trim();
  if (!input || isNaN(input) || parseFloat(input) <= 0) {
    alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Stake ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    return;
  }

  const amountWei = toWeiFromInput(input, lpTokenDecimals);

  try {
    // ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ LP Token
    await lpToken.methods
      .approve(stakingContract.options.address, amountWei)
      .send({ from: account });

    // ‚úÖ Stake
    await stakingContract.methods.stakeLP(amountWei).send({ from: account });

    alert("‚úÖ Stake LP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!");
    loadStakeData();
  } catch (err) {
    alert(getFriendlyErrorMessage(err));
  }
}

// üéÅ ‡πÄ‡∏Ñ‡∏•‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• Staking
export async function claimStakingReward() {
  const account = getCurrentAccount();
  if (!account) {
    alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤");
    return;
  }

  try {
    await stakingContract.methods.claimStakingReward().send({ from: account });
    alert("‚úÖ ‡πÄ‡∏Ñ‡∏•‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    loadStakeData();
  } catch (err) {
    alert(getFriendlyErrorMessage(err));
  }
}

// üîì ‡∏ñ‡∏≠‡∏ô LP ‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏£‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
export async function withdrawLP() {
  const account = getCurrentAccount();
  if (!account) {
    alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤");
    return;
  }

  try {
    await stakingContract.methods.withdrawLP().send({ from: account });
    alert("‚úÖ ‡∏ñ‡∏≠‡∏ô LP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß");
    loadStakeData();
  } catch (err) {
    alert(getFriendlyErrorMessage(err));
  }
}

// üìä ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Stake
export async function loadStakeData() {
  const account = getCurrentAccount();
  if (!account) {
    document.getElementById("stakedLP").innerText = "-";
    document.getElementById("claimableReward").innerText = "-";
    return;
  }

  try {
    const stake = await stakingContract.methods.stakes(account).call();
    const amount = displayWeiToToken(stake.amount, lpTokenDecimals);

    const claimable = await stakingContract.methods.getClaimable(account).call();
    const reward = displayWeiToToken(claimable, kjcTokenDecimals);

    document.getElementById("stakedLP").innerText = `${amount}`;
    document.getElementById("claimableReward").innerText = `${reward}`;
  } catch (e) {
    console.warn("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• stake ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ", e);
    document.getElementById("stakedLP").innerText = "-";
    document.getElementById("claimableReward").innerText = "-";
  }
}
